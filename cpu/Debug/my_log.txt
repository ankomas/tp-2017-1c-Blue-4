IP KERNEL: 127.0.0.1
PUERTO KERNEL: 8080
IP MEMORIA: 127.0.0.1
PUERTO MEMORIA: 8085
||||||||||||||||||||||||||||||
Socket creado: 3
Comenzando conexion a IP: 127.0.0.1, PUERTO: 8085, PROCESO: MEMORIA
Conexion existosa.
Socket creado: 4
Comenzando conexion a IP: 127.0.0.1, PUERTO: 8080, PROCESO: KERNEL
Conexion existosa.

Seteando valores de variables globales
Tamanio de pagina: 256
Maximo stack: 2
Valor inicial de fin programa: Y
Exit: N

A la espera del kernel...
RECIBIENDO PCB, TAMANIO DEL PAQUETE: 128
Deserializando PCB...
Pidiendo linea, size restante: 16
Socket: 3, PID: 100, tamGlob: 256
Leyendo de memoria:
PAG: 0, OFF: 25, SIZE: 16
Leyendo de memoria, respuesta: Y
Leyendo de memoria, tamanio a recibir: 16
[32mPID: 100 PC:0 SP:-1 Ultima Pos Usada: (1,0,0)
[0m	 Evaluando -> [34m	variables a, b[0m
Llamada a [33mDEFINIR VARIABLE
[0mNombre variable: a
Pos asignada a a: 256 (1,0,0)

Llamada a [33mDEFINIR VARIABLE
[0mNombre variable: b
Pos asignada a b: 260 (1,4,0)

ENVIAR PCB, TAMANIO DEL PAQUETE: 184
ENVIAR FIN DE PROGRAMA: Y
A la espera del kernel...
RECIBIENDO PCB, TAMANIO DEL PAQUETE: 184
Deserializando PCB...
Pidiendo linea, size restante: 7
Socket: 3, PID: 100, tamGlob: 256
Leyendo de memoria:
PAG: 0, OFF: 41, SIZE: 7
Leyendo de memoria, respuesta: Y
Leyendo de memoria, tamanio a recibir: 7
[32mPID: 100 PC:1 SP:0 Ultima Pos Usada: (1,4,0)
[0m	 Evaluando -> [34m	a = 3[0m
Llamada a [33mOBTENER POSICION VARIABLE[0m a
Posicion de a: 256

Llamada a [33mASIGNAR[0m en Pag 1 Off 0 el valor 3
GUARDANDO EN MEMORIA:
PID: 100, PAGINA: 1, OFFSET: 0, TAMANIO: 4

ENVIAR PCB, TAMANIO DEL PAQUETE: 184
ENVIAR FIN DE PROGRAMA: Y
A la espera del kernel...
RECIBIENDO PCB, TAMANIO DEL PAQUETE: 184
Deserializando PCB...
Pidiendo linea, size restante: 7
Socket: 3, PID: 100, tamGlob: 256
Leyendo de memoria:
PAG: 0, OFF: 48, SIZE: 7
Leyendo de memoria, respuesta: Y
Leyendo de memoria, tamanio a recibir: 7
[32mPID: 100 PC:2 SP:0 Ultima Pos Usada: (1,4,0)
[0m	 Evaluando -> [34m	b = 5[0m
Llamada a [33mOBTENER POSICION VARIABLE[0m b
Posicion de b: 260

Llamada a [33mASIGNAR[0m en Pag 1 Off 4 el valor 5
GUARDANDO EN MEMORIA:
PID: 100, PAGINA: 1, OFFSET: 4, TAMANIO: 4

ENVIAR PCB, TAMANIO DEL PAQUETE: 184
ENVIAR FIN DE PROGRAMA: Y
A la espera del kernel...
RECIBIENDO PCB, TAMANIO DEL PAQUETE: 184
Deserializando PCB...
Pidiendo linea, size restante: 12
Socket: 3, PID: 100, tamGlob: 256
Leyendo de memoria:
PAG: 0, OFF: 55, SIZE: 12
Leyendo de memoria, respuesta: Y
Leyendo de memoria, tamanio a recibir: 12
[32mPID: 100 PC:3 SP:0 Ultima Pos Usada: (1,4,0)
[0m	 Evaluando -> [34m	a = b + 12[0m
Llamada a [33mOBTENER POSICION VARIABLE[0m b
Posicion de b: 260

Llamada a [33mDEREFERENCIAR[0m Pag 1 Off 4
Leyendo de memoria:
PAG: 1, OFF: 4, SIZE: 4
Leyendo de memoria, respuesta: Y
Leyendo de memoria, tamanio a recibir: 4
Valor obtenido en DEREFERENCIAR: 5

Llamada a [33mOBTENER POSICION VARIABLE[0m a
Posicion de a: 256

Llamada a [33mASIGNAR[0m en Pag 1 Off 0 el valor 17
GUARDANDO EN MEMORIA:
PID: 100, PAGINA: 1, OFFSET: 0, TAMANIO: 4

ENVIAR PCB, TAMANIO DEL PAQUETE: 184
ENVIAR FIN DE PROGRAMA: Y
A la espera del kernel...
RECIBIENDO PCB, TAMANIO DEL PAQUETE: 184
Deserializando PCB...
Pidiendo linea, size restante: 4
Socket: 3, PID: 100, tamGlob: 256
Leyendo de memoria:
PAG: 0, OFF: 67, SIZE: 4
Leyendo de memoria, respuesta: Y
Leyendo de memoria, tamanio a recibir: 4
[32mPID: 100 PC:4 SP:0 Ultima Pos Usada: (1,4,0)
[0m	 Evaluando -> [34mend[0m
Llamada a [33mFINALIZAR[0m

ENVIAR PCB, TAMANIO DEL PAQUETE: 184
ENVIAR FIN DE PROGRAMA: F
A la espera del kernel...
